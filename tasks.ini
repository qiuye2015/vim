# vim: set noet fenc=utf-8 sts=4 sw=4 ts=4 ft=dosini:

# 定义一个新任务
[fjp-build]
command=$(VIM_ROOT)/build.sh
# 定义命令运行的目录; <root> 是 $(VIM_ROOT) 的别名;当前 buffer 的项目根目录
cwd=<root>

[fjp-run]
# 定义任务需要执行的命令，以 `$(...)` 形式出现的宏会在执行时被具体替换
command=$(VIM_FILEDIR)/run.sh
cwd=$(VIM_FILEDIR)
# 定义输出方式，在终端内运行
output=terminal

#==============================================================================
[file-build]
command=echo unsupported filetype $(VIM_FILETYPE)
command:c,cpp/win32=gcc -O2 -Wall -fstrict-aliasing "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)" -lstdc++ -lm -lwinmm -lgdi32 -lws2_32 -msse3 -liphlpapi -ld3d9 -ld3dx9
command:c,cpp/linux=gcc -O2 -Wall -fstrict-aliasing "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)" -lstdc++ -lm -msse3 -ldl -lpthread
command:go/win32=go build -o "$(VIM_PATHNOEXT).exe" "$(VIM_FILEPATH)"
command:go/linux=go build -o "$(VIM_PATHNOEXT)" "$(VIM_FILEPATH)"
command:make/win32=mingw32-make -f "$(VIM_FILEPATH)"
command:make/linux=make -f "$(VIM_FILEPATH)"
command:rust/win32=rustc "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT).exe"
command:rust/linux=rustc "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)"
output=quickfix
# 结束时发送 QuickFixCmdPost make 触发 errormarker
auto=make
save=2

[file-run]
command="$(VIM_FILEPATH)"
command:c,cpp="$(VIM_PATHNOEXT)"
command:go="$(VIM_PATHNOEXT)"
command:python=python "$(VIM_FILENAME)"
command:python/linux=python3 "$(VIM_FILENAME)"
command:make=make -f "$(VIM_FILENAME)" run
command:emake=emake -e "$(VIM_FILENAME)"
command:javascript=node "$(VIM_FILENAME)"
command:sh=sh "$(VIM_FILENAME)"
command:lua=lua "$(VIM_FILENAME)"
command:perl=perl "$(VIM_FILENAME)"
command:ruby=ruby "$(VIM_FILENAME)"
command:zsh=zsh "$(VIM_FILENAME)"
command:bash=bash "$(VIM_FILENAME)"
command:fish=fish "$(VIM_FILENAME)"
command:php=php "$(VIM_FILENAME)"
command:erlang=escript "$(VIM_FILENAME)"
command:ps1=powershell -file "$(VIM_FILENAME)"
command:scala=scala "$(VIM_FILENAME)"
command:haskell=ghci "$(VIM_FILENAME)"
command:applescript=osascript "$(VIM_FILENAME)"
command:vim=:source %
command:vb=cscript /nologo "$(VIM_FILENAME)"
command:rust="$(VIM_PATHNOEXT)"
command:bxrc=bochs -q -f "$(VIM_FILENAME)"
command:odin=odin run "$(VIM_FILENAME)"
output=terminal
cwd=$(VIM_FILEDIR)
save=2

[make]
command=make -f "$(VIM_FILEPATH)"
cwd=$(VIM_FILEDIR)

[make-run]
command=make -f "$(VIM_FILEPATH)" run
cwd=$(VIM_FILEDIR)
output=terminal

[make-test]
command=make -f "$(VIM_FILEPATH)" test
cwd=$(VIM_FILEDIR)
output=terminal

#==============================================================================
[project-init]
command=mkdir build && cd build && cmake ..
cwd=<root>

[project-build]
command=make
cwd=$(VIM_ROOT)

[project-run]
command=make run
cwd=$(VIM_ROOT)
output=terminal

[project-test]
command=make test
cwd=$(VIM_ROOT)
output=terminal

#==============================================================================
# project-wide search, ask user input keyword
[grep-word]
command=rg -n --no-heading --color never "$(?keyword)" "<root>" -tc -tcpp -tpy -tvim -tgo -tasm -tlua -tjs
cwd=<root>
errorformat=%f:%l:%m

# project-wide search, search the word under cursor
[grep-cword]
command=rg -n --no-heading --color never "$(VIM_CWORD)" "<root>" -tc -tcpp -tpy -tvim -tgo -tasm -tlua -tjs
cwd=<root>
errorformat=%f:%l:%m

#==============================================================================
[git-proxy-on]
command=git config --global http.proxy "socks5://127.0.0.1:1080" && git config --global https.proxy "socks5://127.0.0.1:1080"

[git-proxy-off]
command=git config --global --unset http.proxy && git config --global --unset https.proxy

[misc-weather]
command=curl -s wttr.in/?n0

[misc-benchmark-cpu]
command=python -c "import test.pystone;print(test.pystone.pystones(500000))"

[misc-benchmark-mem]
command=dd if=/dev/zero of=/dev/null bs=1M count=32768

[misc-disk-usage]
command=df -h

[misc-system-info]
command=neofetch

[misc-create-qr-code]
command=echo '$(?content)' | curl -F-=\<- qrenco.de

[net-check-port]
command=sudo lsof -i :$(?port)

[net-host-ip]
command=hostname --all-ip-addresses | tr " " "\n" | grep -v "0.0.0.0" | grep -v "127.0.0.1"
command/darwin=ifconfig  | grep -E 'inet.[0-9]' | grep -v '127.0.0.1' | awk '{ print $2}'

[net-start-http]
command=python -m SimpleHTTPServer $(?port)

[net-whois-domain]
command=/usr/bin/whois -h whois.internic.net $(?domain) | sed '/NOTICE:/q'

[ssh-11]
command=ssh 192.168.1.11
